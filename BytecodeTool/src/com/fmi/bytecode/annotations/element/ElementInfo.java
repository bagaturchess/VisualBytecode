package com.fmi.bytecode.annotations.element;

import java.util.Map;


/**
 * The <code>ElementInfo</code> interface represents the root of the object
 * hierarchy, which presents the java language elements.
 * <b> The implementors of the interface must be considered as immutable objects. 
 * It is up to the implementation to decide how to enforce the immutability. </b>
 * 
 * @author Krasimir Topchiyski
 */
public interface ElementInfo {
	
	//Java lang modifiers bit patterns
	/**PUBLIC access modifier bit*/
	public static final int PUBLIC_MODIFIER = 0x0001;
	/**PROTECTED access modifier bit*/
	public static final int PROTECTED_MODIFIER = 0x0004;
	/**PRIVATE access modifier bit*/
	public static final int PRIVATE_MODIFIER = 0x0002;
	/**FINAL modifier bit*/
	public static final int FINAL_MODIFIER = 0x0010;
	/**STATIC modifier bit*/
	public static final int STATIC_MODIFIER = 0x0008;
	/**ABSTRACT modifier bit*/
	public static final int ABSTRACT_MODIFIER = 0x0400;
	/**INTERFACE modifier bit*/
	public static final int INTERFACE_MODIFIER = 0x0200;
	/**SYNCHRONIZED modifier bit*/
	public static final int SYNCHRONIZED_MODIFIER = 0x0020;
	/**VOLATILE modifier bit*/
	public static final int VOLATILE_MODIFIER = 0x0040;
	/**STRICTFP modifier bit*/
	public static final int STRICT_MODIFIER = 0x0800;
	/**NATIVE modifier bit*/
	public static final int NATIVE_MODIFIER = 0x0100;
	/**TRANSIENT modifier bit*/
	public static final int TRANSIENT_MODIFIER = 0x0080;
	/**SYNTHETIC modifier bit*/
	public static final int SYNTHETIC_MODIFIER = 0x1000;
	
	/**
	 * Gets the name of the element.
	 * For classes and packages this is the fully qualified Java language standard name.
	 * For fields, methods and constructors this is just the plain name, without
	 * any additional identifiers or types.
         * All names are in the Java language format. 
	 * 
	 * @return element's name 
	 */
	public String getName();
	
	/**
	 * Returns all modifiers declared for the current element.
	 * The returned bitpattern contains all modifiers declared for the current element 
         * in the class file. The returned bitpattern may contain modifiers, not listed
         * in the current interface.
	 * 
	 * @return bitpattern with the current element modifiers
	 */
	public int getModifiers();
	
	//For the current API we expect to get just the declared annotations in the class
	//the inherited annotations are not taken in account
	/**
	 * Gets all annotations declared for the current element.
	 * The returned Map containes an annotation type as a key and 
	 * a <code>com.fmi.bytecode.annotations.element.AnnotationRecord<code> object as a value.
	 * 
	 * @return Immutable Map with an annotation type as a key and 
	 * a <code>com.fmi.bytecode.annotations.element.AnnotationRecord<code> object as a value.
	 * Empty map is retuned if no annotations are declared. 
	 * @see com.fmi.bytecode.annotations.element.AnnotationRecord.Annotation
	 */
	public Map<String, AnnotationRecord> getAnnotations();
	
	/**
	 * Gets a particular annotation from the declared ones for 
	 * the current element, by its type
	 * 
	 * @param annotationType the type of the issued annotation
	 * @return an <code>Annotation</code> object if it is found, 
	 * otherwise <code>null</null> 
	 * @see com.fmi.bytecode.annotations.element.AnnotationRecord.Annotation
	 */
	public AnnotationRecord getAnnotation(String annotationType);
	
	/**
	 * Checks, if the current element is generated by the compiler
	 * @return true, if the element is synthetically generated, otherwise false
	 */
	public boolean isSynthetic();
	
}
